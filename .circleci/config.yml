version: 2.1

defaults: &defaults
  working_directory: ~/app

rust_defaults: &rust_defaults
  <<: *defaults
  docker:
    - image: circleci/rust:latest

go_defaults: &go_defaults
  <<: *defaults
  docker:
    - image: circleci/golang:latest

commands:
  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"

jobs:
  checkout-repo:
    <<: *go_defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - persist_to_workspace:
          root: .
          paths: .

  go-tests:
    <<: *go_defaults
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/app
      - run: 
          name: Run Tests
          command: |
            cd ~/app
            go test ./bls ./snark
      - run:
          name: Build and run example
          command: |
            cd ~/app/
            cd ./examples
            go build bls_example.go
            ./bls_example

  bundle-libs:
    working_directory: ~/app
    macos:
      xcode: 11.4.0
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: ~/app
      - run:
          name: Install rustup
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Build release libs
          command: |
            git submodule update --init --recursive
            ./scripts/release.sh
      - store_artifacts:
          path: ~/app/libs.tar.gz
      - persist_to_workspace:
          root: .
          paths: .
      - save-sccache-cache

workflows:
  version: 2
  run-tests:
    jobs:
      - checkout-repo
      - bundle-libs:
          requires:
            - checkout-repo
      - go-tests:
          requires:
            - bundle-libs
